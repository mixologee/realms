stock_src/mail.c src/mail.c
*** stock_src/mail.c	Mon Dec 16 05:19:56 1996
--- src/mail.c	Mon Dec 16 13:38:28 1996
***************
*** 212,218 ****
     actual message text (char *).
  */
  
! void store_mail(long to, long from, char *message_pointer)
  {
    header_block_type header;
    data_block_type data;
--- 212,218 ----
     actual message text (char *).
  */
  
! void store_mail(long to, long from, sh_int vnum, char *message_pointer)
  {
    header_block_type header;
    data_block_type data;
***************
*** 233,238 ****
--- 233,239 ----
    header.header_data.next_block = LAST_BLOCK;
    header.header_data.from = from;
    header.header_data.to = to;
+   header.header_data.vnum = vnum;
    header.header_data.mail_time = time(0);
    strncpy(header.txt, msg_txt, HEADER_BLOCK_DATASIZE);
    header.txt[HEADER_BLOCK_DATASIZE] = '\0';
***************
*** 305,311 ****
  you're retrieving.  It returns to you a char pointer to the message text.
  The mail is then discarded from the file and the mail index. */
  
! char *read_delete(long recipient)
  /* recipient is the name as it appears in the index.
     recipient_formatted is the name as it should appear on the mail
     header (i.e. the text handed to the player) */
--- 306,312 ----
  you're retrieving.  It returns to you a char pointer to the message text.
  The mail is then discarded from the file and the mail index. */
  
! char *read_delete(long recipient, sh_int *obj_vnum)
  /* recipient is the name as it appears in the index.
     recipient_formatted is the name as it should appear on the mail
     header (i.e. the text handed to the player) */
***************
*** 366,371 ****
--- 367,373 ----
    }
    tmstr = asctime(localtime(&header.header_data.mail_time));
    *(tmstr + strlen(tmstr) - 1) = '\0';
+   *obj_vnum = header.header_data.vnum;
  
    sprintf(buf, " * * * * Midgaard Mail System * * * *\r\n"
  	  "Date: %s\r\n"
***************
*** 440,445 ****
--- 442,453 ----
  {
    long recipient;
    char buf[256];
+   char buf2[256];
+   int price = STAMP_PRICE;
+   struct obj_data *obj;
+   extern struct index_data *obj_index;
+ 
+   obj = NULL;
  
    if (GET_LEVEL(ch) < MIN_MAIL_LEVEL) {
      sprintf(buf, "$n tells you, 'Sorry, you have to be level %d to send mail!'",
***************
*** 447,477 ****
      act(buf, FALSE, mailman, 0, ch, TO_VICT);
      return;
    }
!   one_argument(arg, buf);
  
    if (!*buf) {			/* you'll get no argument from me! */
      act("$n tells you, 'You need to specify an addressee!'",
  	FALSE, mailman, 0, ch, TO_VICT);
      return;
    }
-   if (GET_GOLD(ch) < STAMP_PRICE) {
-     sprintf(buf, "$n tells you, 'A stamp costs %d coins.'\r\n"
- 	    "$n tells you, '...which I see you can't afford.'", STAMP_PRICE);
-     act(buf, FALSE, mailman, 0, ch, TO_VICT);
-     return;
-   }
    if ((recipient = get_id_by_name(buf)) < 0) {
      act("$n tells you, 'No one by that name is registered here!'",
  	FALSE, mailman, 0, ch, TO_VICT);
      return;
    }
    act("$n starts to write some mail.", TRUE, ch, 0, 0, TO_ROOM);
    sprintf(buf, "$n tells you, 'I'll take %d coins for the stamp.'\r\n"
         "$n tells you, 'Write your message, use @ on a new line when done.'",
! 	  STAMP_PRICE);
  
    act(buf, FALSE, mailman, 0, ch, TO_VICT);
!   GET_GOLD(ch) -= STAMP_PRICE;
    SET_BIT(PLR_FLAGS(ch), PLR_MAILING | PLR_WRITING);
  
    ch->desc->mail_to = recipient;
--- 455,499 ----
      act(buf, FALSE, mailman, 0, ch, TO_VICT);
      return;
    }
!   two_arguments(arg, buf, buf2);
  
    if (!*buf) {			/* you'll get no argument from me! */
      act("$n tells you, 'You need to specify an addressee!'",
  	FALSE, mailman, 0, ch, TO_VICT);
      return;
    }
    if ((recipient = get_id_by_name(buf)) < 0) {
      act("$n tells you, 'No one by that name is registered here!'",
  	FALSE, mailman, 0, ch, TO_VICT);
      return;
    }
+   
+   if (*buf2 && (obj = get_obj_in_list_vis(ch, buf2, ch->carrying))) {
+     act("$n takes $p and prepares it for packaging.", FALSE, mailman, obj, ch, TO_VICT);
+     price += STAMP_PRICE*.1;
+     price += GET_OBJ_WEIGHT(obj)*10;
+   }
+     
+   if (GET_GOLD(ch) < price) {
+     sprintf(buf, "$n tells you, 'A stamp costs %d coins.'\r\n"
+ 	    "$n tells you, '...which I see you can't afford.'", price);
+     act(buf, FALSE, mailman, 0, ch, TO_VICT);
+     return;
+   }
+ 
+   if (obj != NULL) {
+     ch->desc->mail_vnum = GET_OBJ_VNUM(obj);
+     extract_obj(obj);
+   } else
+     ch->desc->mail_vnum = NOTHING;
+ 
    act("$n starts to write some mail.", TRUE, ch, 0, 0, TO_ROOM);
    sprintf(buf, "$n tells you, 'I'll take %d coins for the stamp.'\r\n"
         "$n tells you, 'Write your message, use @ on a new line when done.'",
! 	  price);
  
    act(buf, FALSE, mailman, 0, ch, TO_VICT);
!   GET_GOLD(ch) -= price;
    SET_BIT(PLR_FLAGS(ch), PLR_MAILING | PLR_WRITING);
  
    ch->desc->mail_to = recipient;
***************
*** 498,504 ****
  			  int cmd, char *arg)
  {
    char buf[256];
!   struct obj_data *obj;
  
    if (!has_mail(GET_IDNUM(ch))) {
      sprintf(buf, "$n tells you, 'Sorry, you don't have any mail waiting.'");
--- 520,527 ----
  			  int cmd, char *arg)
  {
    char buf[256];
!   struct obj_data *obj, *mail_obj;
!   sh_int obj_vnum = NOTHING;
  
    if (!has_mail(GET_IDNUM(ch))) {
      sprintf(buf, "$n tells you, 'Sorry, you don't have any mail waiting.'");
***************
*** 517,529 ****
      GET_OBJ_WEIGHT(obj) = 1;
      GET_OBJ_COST(obj) = 30;
      GET_OBJ_RENT(obj) = 10;
!     obj->action_description = read_delete(GET_IDNUM(ch));
  
      if (obj->action_description == NULL)
        obj->action_description =
  	str_dup("Mail system error - please report.  Error #11.\r\n");
  
      obj_to_char(obj, ch);
  
      act("$n gives you a piece of mail.", FALSE, mailman, 0, ch, TO_VICT);
      act("$N gives $n a piece of mail.", FALSE, ch, 0, mailman, TO_ROOM);
--- 540,559 ----
      GET_OBJ_WEIGHT(obj) = 1;
      GET_OBJ_COST(obj) = 30;
      GET_OBJ_RENT(obj) = 10;
!     obj->action_description = read_delete(GET_IDNUM(ch), &obj_vnum);
  
      if (obj->action_description == NULL)
        obj->action_description =
  	str_dup("Mail system error - please report.  Error #11.\r\n");
  
      obj_to_char(obj, ch);
+ 
+     if (obj_vnum != NOTHING && real_object(obj_vnum) != NOTHING) {
+       mail_obj = read_object(real_object(obj_vnum), REAL);
+       obj_to_char(mail_obj, ch);
+       act("$n gives you $p, which was attached to your mail.", FALSE, mailman, mail_obj, ch, TO_VICT);
+       act("$N gives $n $p, which was attached to $S mail.", FALSE, ch, mail_obj, mailman, TO_ROOM);
+     }
  
      act("$n gives you a piece of mail.", FALSE, mailman, 0, ch, TO_VICT);
      act("$N gives $n a piece of mail.", FALSE, ch, 0, mailman, TO_ROOM);
diff -c stock_src/mail.h src/mail.h
*** stock_src/mail.h	Mon Dec 16 05:19:56 1996
--- src/mail.h	Mon Dec 16 13:20:32 1996
***************
*** 46,53 ****
  
  int	scan_file(void);
  int	has_mail(long recipient);
! void	store_mail(long to, long from, char *message_pointer);
! char	*read_delete(long recipient);
  
  
  #define HEADER_BLOCK  -1
--- 46,53 ----
  
  int	scan_file(void);
  int	has_mail(long recipient);
! void	store_mail(long to, long from, sh_int vnum, char *message_pointer);
! char	*read_delete(long recipient, sh_int *obj_vnum);
  
  
  #define HEADER_BLOCK  -1
***************
*** 64,69 ****
--- 64,70 ----
     long	next_block;		/* if header block, link to next block	*/
     long from;			/* idnum of the mail's sender		*/
     long to;			/* idnum of mail's recipient		*/
+    sh_int vnum;			// vnum of obj being mailed
     time_t mail_time;		/* when was the letter mailed?		*/
  };
  
diff -c stock_src/modify.c src/modify.c
*** stock_src/modify.c	Mon Dec 16 05:19:56 1996
--- src/modify.c	Mon Dec 16 13:21:48 1996
***************
*** 90,97 ****
  
    if (terminator) {
      if (!d->connected && (PLR_FLAGGED(d->character, PLR_MAILING))) {
!       store_mail(d->mail_to, GET_IDNUM(d->character), *d->str);
        d->mail_to = 0;
        free(*d->str);
        free(d->str);
        SEND_TO_Q("Message sent!\r\n", d);
--- 90,98 ----
  
    if (terminator) {
      if (!d->connected && (PLR_FLAGGED(d->character, PLR_MAILING))) {
!       store_mail(d->mail_to, GET_IDNUM(d->character), d->mail_vnum, *d->str);
        d->mail_to = 0;
+       d->mail_vnum = NOTHING;
        free(*d->str);
        free(d->str);
        SEND_TO_Q("Message sent!\r\n", d);
diff -c stock_src/structs.h src/structs.h
*** stock_src/structs.h	Mon Dec 16 11:51:27 1996
--- src/structs.h	Mon Dec 16 13:09:34 1996
***************
*** 888,893 ****
--- 888,894 ----
     char	**str;			/* for the modify-str system		*/
     size_t	max_str;		/*		-			*/
     long	mail_to;		/* name for mail system			*/
+    sh_int mail_vnum;		// virtual number of obj you're mailing
     int	prompt_mode;		/* control of prompt-printing		*/
     char	inbuf[MAX_RAW_INPUT_LENGTH];  /* buffer for raw input		*/
     char	last_input[MAX_INPUT_LENGTH]; /* the last input			*/
Common subdirectories: stock_src/util and src/util

